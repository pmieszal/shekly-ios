//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `tab-bar-add-button`.
    static let tabBarAddButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-add-button")
    /// Image `tab-bar-more-icon`.
    static let tabBarMoreIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-more-icon")
    /// Image `tab-bar-plan-icon`.
    static let tabBarPlanIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-plan-icon")
    /// Image `tab-bar-stats-icon`.
    static let tabBarStatsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-stats-icon")
    /// Image `tab-bar-wallet-icon`.
    static let tabBarWalletIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab-bar-wallet-icon")
    /// Image `trash-icon`.
    static let trashIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash-icon")
    
    /// `UIImage(named: "tab-bar-add-button", bundle: ..., traitCollection: ...)`
    static func tabBarAddButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarAddButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-more-icon", bundle: ..., traitCollection: ...)`
    static func tabBarMoreIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarMoreIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-plan-icon", bundle: ..., traitCollection: ...)`
    static func tabBarPlanIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarPlanIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-stats-icon", bundle: ..., traitCollection: ...)`
    static func tabBarStatsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarStatsIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tab-bar-wallet-icon", bundle: ..., traitCollection: ...)`
    static func tabBarWalletIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarWalletIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash-icon", bundle: ..., traitCollection: ...)`
    static func trashIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trashIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `CategoryHeaderCell`.
    static let categoryHeaderCell = _R.nib._CategoryHeaderCell()
    /// Nib `CategoryListCell`.
    static let categoryListCell = _R.nib._CategoryListCell()
    /// Nib `CategorySubcategoriesCell`.
    static let categorySubcategoriesCell = _R.nib._CategorySubcategoriesCell()
    /// Nib `NewEntryCollectionCell`.
    static let newEntryCollectionCell = _R.nib._NewEntryCollectionCell()
    /// Nib `SheklyMonthCell`.
    static let sheklyMonthCell = _R.nib._SheklyMonthCell()
    /// Nib `SheklyWalletCell`.
    static let sheklyWalletCell = _R.nib._SheklyWalletCell()
    /// Nib `SheklyWalletEntryEmptyCell`.
    static let sheklyWalletEntryEmptyCell = _R.nib._SheklyWalletEntryEmptyCell()
    /// Nib `WalletEntryCell`.
    static let walletEntryCell = _R.nib._WalletEntryCell()
    
    /// `UINib(name: "CategoryHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryHeaderCell) instead")
    static func categoryHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryHeaderCell)
    }
    
    /// `UINib(name: "CategoryListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryListCell) instead")
    static func categoryListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryListCell)
    }
    
    /// `UINib(name: "CategorySubcategoriesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categorySubcategoriesCell) instead")
    static func categorySubcategoriesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySubcategoriesCell)
    }
    
    /// `UINib(name: "NewEntryCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newEntryCollectionCell) instead")
    static func newEntryCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newEntryCollectionCell)
    }
    
    /// `UINib(name: "SheklyMonthCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sheklyMonthCell) instead")
    static func sheklyMonthCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sheklyMonthCell)
    }
    
    /// `UINib(name: "SheklyWalletCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sheklyWalletCell) instead")
    static func sheklyWalletCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sheklyWalletCell)
    }
    
    /// `UINib(name: "SheklyWalletEntryEmptyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sheklyWalletEntryEmptyCell) instead")
    static func sheklyWalletEntryEmptyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sheklyWalletEntryEmptyCell)
    }
    
    /// `UINib(name: "WalletEntryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletEntryCell) instead")
    static func walletEntryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletEntryCell)
    }
    
    static func categoryHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryHeaderCell? {
      return R.nib.categoryHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryHeaderCell
    }
    
    static func categoryListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryListCell? {
      return R.nib.categoryListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryListCell
    }
    
    static func categorySubcategoriesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySubcategoriesCell? {
      return R.nib.categorySubcategoriesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySubcategoriesCell
    }
    
    static func newEntryCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEntryCollectionCell? {
      return R.nib.newEntryCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEntryCollectionCell
    }
    
    static func sheklyMonthCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyMonthCell? {
      return R.nib.sheklyMonthCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyMonthCell
    }
    
    static func sheklyWalletCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyWalletCell? {
      return R.nib.sheklyWalletCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyWalletCell
    }
    
    static func sheklyWalletEntryEmptyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyWalletEntryEmptyCell? {
      return R.nib.sheklyWalletEntryEmptyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyWalletEntryEmptyCell
    }
    
    static func walletEntryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletEntryCell? {
      return R.nib.walletEntryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletEntryCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryHeaderCell`.
    static let categoryHeaderCell: Rswift.ReuseIdentifier<CategoryHeaderCell> = Rswift.ReuseIdentifier(identifier: "CategoryHeaderCell")
    /// Reuse identifier `CategoryListCell`.
    static let categoryListCell: Rswift.ReuseIdentifier<CategoryListCell> = Rswift.ReuseIdentifier(identifier: "CategoryListCell")
    /// Reuse identifier `CategorySubcategoriesCell`.
    static let categorySubcategoriesCell: Rswift.ReuseIdentifier<CategorySubcategoriesCell> = Rswift.ReuseIdentifier(identifier: "CategorySubcategoriesCell")
    /// Reuse identifier `NewEntryCollectionCell`.
    static let newEntryCollectionCell: Rswift.ReuseIdentifier<NewEntryCollectionCell> = Rswift.ReuseIdentifier(identifier: "NewEntryCollectionCell")
    /// Reuse identifier `SheklyMonthCell`.
    static let sheklyMonthCell: Rswift.ReuseIdentifier<SheklyMonthCell> = Rswift.ReuseIdentifier(identifier: "SheklyMonthCell")
    /// Reuse identifier `SheklyWalletCell`.
    static let sheklyWalletCell: Rswift.ReuseIdentifier<SheklyWalletCell> = Rswift.ReuseIdentifier(identifier: "SheklyWalletCell")
    /// Reuse identifier `SheklyWalletEntryEmptyCell`.
    static let sheklyWalletEntryEmptyCell: Rswift.ReuseIdentifier<SheklyWalletEntryEmptyCell> = Rswift.ReuseIdentifier(identifier: "SheklyWalletEntryEmptyCell")
    /// Reuse identifier `WalletEntryCell`.
    static let walletEntryCell: Rswift.ReuseIdentifier<WalletEntryCell> = Rswift.ReuseIdentifier(identifier: "WalletEntryCell")
    /// Reuse identifier `WalletListCell`.
    static let walletListCell: Rswift.ReuseIdentifier<WalletListCell> = Rswift.ReuseIdentifier(identifier: "WalletListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Category`.
    static let category = _R.storyboard.category()
    /// Storyboard `DatePicker`.
    static let datePicker = _R.storyboard.datePicker()
    /// Storyboard `NewEntry`.
    static let newEntry = _R.storyboard.newEntry()
    /// Storyboard `Plan`.
    static let plan = _R.storyboard.plan()
    /// Storyboard `WalletList`.
    static let walletList = _R.storyboard.walletList()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()
    
    /// `UIStoryboard(name: "Category", bundle: ...)`
    static func category(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.category)
    }
    
    /// `UIStoryboard(name: "DatePicker", bundle: ...)`
    static func datePicker(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.datePicker)
    }
    
    /// `UIStoryboard(name: "NewEntry", bundle: ...)`
    static func newEntry(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newEntry)
    }
    
    /// `UIStoryboard(name: "Plan", bundle: ...)`
    static func plan(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.plan)
    }
    
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    
    /// `UIStoryboard(name: "WalletList", bundle: ...)`
    static func walletList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.walletList)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _CategoryHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "CategoryHeaderCell"
      let name = "CategoryHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryListCell
      
      let bundle = R.hostingBundle
      let identifier = "CategoryListCell"
      let name = "CategoryListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryListCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategorySubcategoriesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategorySubcategoriesCell
      
      let bundle = R.hostingBundle
      let identifier = "CategorySubcategoriesCell"
      let name = "CategorySubcategoriesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySubcategoriesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySubcategoriesCell
      }
      
      fileprivate init() {}
    }
    
    struct _NewEntryCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewEntryCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "NewEntryCollectionCell"
      let name = "NewEntryCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEntryCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEntryCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _SheklyMonthCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SheklyMonthCell
      
      let bundle = R.hostingBundle
      let identifier = "SheklyMonthCell"
      let name = "SheklyMonthCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyMonthCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyMonthCell
      }
      
      fileprivate init() {}
    }
    
    struct _SheklyWalletCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SheklyWalletCell
      
      let bundle = R.hostingBundle
      let identifier = "SheklyWalletCell"
      let name = "SheklyWalletCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyWalletCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyWalletCell
      }
      
      fileprivate init() {}
    }
    
    struct _SheklyWalletEntryEmptyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SheklyWalletEntryEmptyCell
      
      let bundle = R.hostingBundle
      let identifier = "SheklyWalletEntryEmptyCell"
      let name = "SheklyWalletEntryEmptyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SheklyWalletEntryEmptyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SheklyWalletEntryEmptyCell
      }
      
      fileprivate init() {}
    }
    
    struct _WalletEntryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WalletEntryCell
      
      let bundle = R.hostingBundle
      let identifier = "WalletEntryCell"
      let name = "WalletEntryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletEntryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletEntryCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try category.validate()
      try datePicker.validate()
      try newEntry.validate()
      try plan.validate()
      try wallet.validate()
      try walletList.validate()
    }
    
    struct category: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let categoryViewController = StoryboardViewControllerResource<CategoryViewController>(identifier: "CategoryViewController")
      let name = "Category"
      
      func categoryViewController(_: Void = ()) -> CategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoryViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.category().categoryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoryViewController' could not be loaded from storyboard 'Category' as 'CategoryViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct datePicker: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let datePickerViewController = StoryboardViewControllerResource<DatePickerViewController>(identifier: "DatePickerViewController")
      let name = "DatePicker"
      
      func datePickerViewController(_: Void = ()) -> DatePickerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: datePickerViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.datePicker().datePickerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'datePickerViewController' could not be loaded from storyboard 'DatePicker' as 'DatePickerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newEntry: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewEntry"
      let newEntryViewController = StoryboardViewControllerResource<NewEntryViewController>(identifier: "NewEntryViewController")
      
      func newEntryViewController(_: Void = ()) -> NewEntryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newEntryViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tab-bar-plan-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab-bar-plan-icon' is used in storyboard 'NewEntry', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tab-bar-wallet-icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tab-bar-wallet-icon' is used in storyboard 'NewEntry', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.newEntry().newEntryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newEntryViewController' could not be loaded from storyboard 'NewEntry' as 'NewEntryViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct plan: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Plan"
      let planViewController = StoryboardViewControllerResource<PlanViewController>(identifier: "PlanViewController")
      
      func planViewController(_: Void = ()) -> PlanViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: planViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.plan().planViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'planViewController' could not be loaded from storyboard 'Plan' as 'PlanViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Wallet"
      let walletViewController = StoryboardViewControllerResource<WalletViewController>(identifier: "WalletViewController")
      
      func walletViewController(_: Void = ()) -> WalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.wallet().walletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletViewController' could not be loaded from storyboard 'Wallet' as 'WalletViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct walletList: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletList"
      let walletListViewController = StoryboardViewControllerResource<WalletListViewController>(identifier: "WalletListViewController")
      
      func walletListViewController(_: Void = ()) -> WalletListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.walletList().walletListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletListViewController' could not be loaded from storyboard 'WalletList' as 'WalletListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
